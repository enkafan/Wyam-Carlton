@{
    var title = Model.WithoutSettings.String(BlogKeys.Title);
    var pageTitle = Context.String(BlogKeys.Title) + (string.IsNullOrWhiteSpace(title) ? string.Empty : " - " + title);

    var tags = Model.Get<string[]>(BlogKeys.Tags);
    var published = Model.Get<DateTime>(BlogKeys.Published);   
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
    <title>@pageTitle</title>

    <link href="https://fonts.googleapis.com/css?family=Raleway:900" rel="stylesheet">
    <link rel="stylesheet" href="@Context.GetLink("/assets/css/carlton.css")" />
</head>
<body>
    <div id="layout">
        <div id="sidebar">
            <div id="header">
                <h1><a href="/">@Context.String(BlogKeys.Title)</a></h1>
                <div id="links">
                    <ul>
                        <li><a href="@Context.GetLink("/about")">About Me</a></li>
                        <li><a href="@Context.GetLink("/posts")">Archive</a></li>
                        <li><a href="@Context.GetLink("/tags")">Tags</a></li>
                    </ul>
                </div>

                <div id="icon-links">
                    <ul>
                        @{
                            var icons = new Dictionary<string, string>
                            {
                                { "github", Context.String("Github") },
                                { "twitter", Context.String("Twitter") },
                                { "linkedin", Context.String("LinkedIn") },
                                { "rss", Context.String(BlogKeys.RssPath) }
                            };

                            foreach (var icon in icons)
                            {
                                if (string.IsNullOrWhiteSpace(icon.Value) == false)
                                {
                                    <li class="icon-@icon.Key">
                                        <a href="@icon.Value" title="@icon.Key">
                                            <span class="fa-stack fa">
                                                <i class="fa fa-circle  fa-stack-2x"></i>
                                                <i class="fa fa-@(icon.Key) fa-stack-1x fa-inverse"></i>
                                            </span>
                                        </a>
                                    </li>
                                }
                            }
                        }
                    </ul>
                </div>
            </div>
        </div>
        
        <div id="main">
            <div id="post-body">
                <div id="content">
                    <div class="post-header">
                        @if (string.IsNullOrWhiteSpace(title) == false)
                        {
                            <h1><a href="@Context.GetLink(Model)">@title</a></h1>
                        }
                        
                        <div class="meta">
                            @if (published != default(DateTime))
                            {
                                <span>@published.ToLongDateString()</span>
                            }

                            @if (tags != null){
                                <span class="tags">
                                    <i class="fa fa-tags" aria-hidden="true"></i>
                                    @foreach(var tag in tags.OrderBy(x => x))
                                    {
                                        IDocument tagDocument = Documents[BlogPipelines.Tags].FirstOrDefault(x => x.String(BlogKeys.Tag) == tag);
                                        if(tagDocument != null)
                                        {                
                                            <a role="button" href="@Context.GetLink(tagDocument)">@tag</a>
                                        }
                                    }
                                </span>
                            }       
                        </div>
                    </div>
                    @RenderBody()
                </div>
            </div>
        </div>
    </div>

    
    <script src="@Context.GetLink("/assets/js/highlight.pack.js")"></script>
    <script type="text/javascript">
        hljs.registerLanguage("console", function(hljs) {
        return {  aliases: ["output", "log"], case_insensitive: true, keywords: "", contains: [] };
        });
        hljs.initHighlightingOnLoad();
    </script>
</body>
</html>
